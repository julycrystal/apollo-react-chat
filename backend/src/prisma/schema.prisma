datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Terry {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String
    type   String
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String                    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?                   @unique
    username       String?                   @unique
    conversations  ConversationParticipant[]
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Conversation   Conversation?             @relation(fields: [conversationId], references: [id])
    conversationId String?                   @db.ObjectId
    message        Message[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
    id              String                    @id @default(auto()) @map("_id") @db.ObjectId
    messages        Message[]
    participants    ConversationParticipant[]
    timeCreated     DateTime                  @default(now())
    timeUpdated     DateTime                  @updatedAt
    users           User[]
    latestMessageId String?                   @unique
    latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model ConversationParticipant {
    id                   String       @id @default(auto()) @map("_id") @db.ObjectId
    userId               String
    user                 User         @relation(fields: [userId], references: [id])
    conversationId       String
    conversation         Conversation @relation(fields: [conversationId], references: [id])
    hasSeenLatestMessage Boolean
    timeCreated          DateTime     @default(now())
    timeUpdated          DateTime     @updatedAt
}

model Message {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    body           String
    conversationId String
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    senderId       String
    sender         User          @relation(fields: [senderId], references: [id])
    isLatestIn     Conversation? @relation("latestConversationMessage")
    timeCreated    DateTime      @default(now())
    timeUpdated    DateTime      @updatedAt
}

model Test {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String
}
